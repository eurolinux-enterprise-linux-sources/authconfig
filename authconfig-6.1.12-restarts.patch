diff -up authconfig-6.1.12/authinfo.py.restarts authconfig-6.1.12/authinfo.py
--- authconfig-6.1.12/authinfo.py.restarts	2014-06-19 10:20:16.570253808 +0200
+++ authconfig-6.1.12/authinfo.py	2014-06-19 10:20:49.354023538 +0200
@@ -737,73 +737,38 @@ def domain2dn(domain):
 
 DEFAULT_DNS_QUERY_SIZE = 1024
 
-def toggleCachingService(enableCaching, nostart, onlystart):
-	if not nostart:
-		if enableCaching:
-			if not onlystart:
-				os.system("/sbin/service nscd stop >/dev/null 2>&1")
-			os.system("/sbin/service nscd start")
-		else:
-			try:
-				os.stat(PATH_NSCD_PID)
-				os.system("/sbin/service nscd stop")
-			except OSError:
-				pass
-	return True
 
-def toggleNisService(enableNis, nisDomain, nostart, onlystart):
-	if enableNis and nisDomain:
-		if not nostart:
-			os.system("/bin/domainname " + nisDomain)
-		try:
-			os.stat(PATH_RPCBIND)
-			os.system("/sbin/chkconfig --add rpcbind")
-			os.system("/sbin/chkconfig --level 345 rpcbind on")
-			if not nostart:
-				if not onlystart:
-					os.system("/sbin/service rpcbind stop >/dev/null 2>&1")
-				os.system("/sbin/service rpcbind start")
-		except OSError:
-			pass
-		try:
-			os.stat(PATH_YPBIND)
-			os.system("/sbin/chkconfig --add ypbind")
-			os.system("/sbin/chkconfig --level 345 ypbind on")
-			if not nostart:
-				try:
-					os.stat(PATH_YPBIND_PID)
-					if not onlystart:
-						os.system("/sbin/service ypbind restart")
-				except OSError:
-					os.system("/sbin/service ypbind start")
-		except OSError:
-			pass
-	else:
-		if not nostart:
-			os.system("/bin/domainname \"(none)\"")
-		try:
-			os.stat(PATH_YPBIND)
-			if not nostart:
-				try:
-					os.stat(PATH_YPBIND_PID)
-					os.system("/sbin/service ypbind stop")
-				except OSError:
-					pass
-			os.system("/sbin/chkconfig --level 345 ypbind off")
-		except OSError:
-			pass
-	return True
+class SysVInitService:
+	def start(self, service):
+		os.system("/sbin/service " + service + " start")
+
+	def stop(self, service):
+		os.system("/sbin/service " + service + " stop >/dev/null 2>&1")
+
+	def enable(self, service):
+		os.system("/sbin/chkconfig --add " + service)
+		os.system("/sbin/chkconfig --level 345 " + service + " on")
+
+	def disable(self, service):
+		os.system("/sbin/chkconfig --level 345 " + service + " off")
 
-def toggleSplatbindService(enable, path, pidfile, name, nostart, onlystart):
+	def isEnabled(self, service):
+		rv = os.system("/sbin/chkconfig " + service + " >/dev/null 2>&1")
+		return os.WIFEXITED(rv) and os.WEXITSTATUS(rv) == 0
+
+	def tryRestart(self, service):
+		os.system("/sbin/service " + service + " condrestart >/dev/null 2>&1")
+
+Service = SysVInitService()
+
+def toggleSplatbindService(enable, path, name, nostart):
 	if enable:
 		try:
 			os.stat(path)
-			os.system("/sbin/chkconfig --add " + name)
-			os.system("/sbin/chkconfig --level 345 " + name + " on")
+			Service.enable(name)
 			if not nostart:
-				if not onlystart:
-					os.system("/sbin/service " + name +" stop >/dev/null 2>&1")
-				os.system("/sbin/service " + name +" start")
+				Service.stop(name)
+				Service.start(name)
 		except OSError:
 			pass
 	else:
@@ -811,12 +776,10 @@ def toggleSplatbindService(enable, path,
 			os.stat(path)
 			if not nostart:
 				try:
-					os.stat(pidfile)
-					os.system("/sbin/service " + name +" stop")
+					Service.stop(name)
 				except OSError:
 					pass
-
-			os.system("/sbin/chkconfig --level 345 " + name + " off")
+			Service.disable(name)
 		except OSError:
 			pass
 	return True
@@ -941,8 +904,9 @@ def read(msgcb):
 	return info
 
 class SaveGroup:
-	def __init__(self, savefunc, attrlist):
+	def __init__(self, savefunc, togglefunc, attrlist):
 		self.saveFunction = savefunc
+		self.toggleFunction = togglefunc
 		self.attrlist = attrlist
 
 	def attrsDiffer(self, a, b):
@@ -1074,17 +1038,15 @@ class FileBackup:
 		return rv
 
 def readCache():
-	rv = os.system("/sbin/chkconfig nscd >/dev/null 2>&1")
-	return os.WIFEXITED(rv) and os.WEXITSTATUS(rv) == 0
+	return Service.isEnabled("nscd")
 
 def writeCache(enabled):
 	if enabled:
-		os.system("/sbin/chkconfig --add nscd")
-		os.system("/sbin/chkconfig --level 345 nscd on")
+		Service.enable("nscd")
 	else:
 		try:
 			os.stat(PATH_NSCD)
-			os.system("/sbin/chkconfig --level 345 nscd off");
+			Service.disable("nscd")
 		except OSError:
 			pass
 	return True
@@ -1167,7 +1129,7 @@ all_configs = [
 	FileBackup("network", SYSCONFDIR+"/sysconfig/network"),
 	FileBackup("libuser.conf", SYSCONFDIR+"/libuser.conf"),
 	FileBackup("login.defs", SYSCONFDIR+"/login.defs"),
-	FileBackup("sssd.conf", SYSCONFDIR+"/sssd/sssd.conf"),
+	FileBackup("sssd.conf", PATH_SSSD_CONFIG),
 	FileBackup("shadow", SYSCONFDIR+"/shadow"),
 	FileBackup("passwd", SYSCONFDIR+"/passwd"),
 	FileBackup("gshadow", SYSCONFDIR+"/gshadow"),
@@ -1300,44 +1262,44 @@ class AuthInfo:
 		self.sssdConfig = None
 		self.sssdDomain = None
 		self.forceSSSDUpdate = None
-		self.confChanged = False
 		if SSSDConfig:
 			try:
 				self.sssdConfig = SSSDConfig.SSSDConfig()
 				self.sssdConfig.new_config()
 			except IOError:
 				pass
+		self.toggleFunctions = set()
 		self.save_groups = [
-	SaveGroup(self.writeCache, [("enableCache", "b"), ("implicitSSSD", "b")]),
-	SaveGroup(self.writeHesiod, [("hesiodLHS", "i"), ("hesiodRHS", "i")]),
-	SaveGroup(self.writeNIS, [("nisDomain", "c"), ("nisLocalDomain", "c"), ("nisServer", "c")]),
-	SaveGroup(self.writeLDAP, [("ldapServer", "i"), ("ldapBaseDN", "c"), ("enableLDAPS", "b"),
+	SaveGroup(self.writeCache, self.toggleCachingService, [("enableCache", "b"), ("implicitSSSD", "b")]),
+	SaveGroup(self.writeHesiod, None, [("hesiodLHS", "i"), ("hesiodRHS", "i")]),
+	SaveGroup(self.writeNIS, self.toggleNisService, [("nisDomain", "c"), ("nisLocalDomain", "c"), ("nisServer", "c")]),
+	SaveGroup(self.writeLDAP, None, [("ldapServer", "i"), ("ldapBaseDN", "c"), ("enableLDAPS", "b"),
 		("ldapSchema", "c"), ("ldapCacertDir", "c"), ("passwordAlgorithm", "i")]),
-	SaveGroup(self.writeLibuser, [("passwordAlgorithm", "i")]),
-	SaveGroup(self.writeLogindefs, [("passwordAlgorithm", "i")]),
-	SaveGroup(self.writeKerberos, [("kerberosRealm", "c"), ("kerberosKDC", "i"),
+	SaveGroup(self.writeLibuser, None, [("passwordAlgorithm", "i")]),
+	SaveGroup(self.writeLogindefs, None, [("passwordAlgorithm", "i")]),
+	SaveGroup(self.writeKerberos, None, [("kerberosRealm", "c"), ("kerberosKDC", "i"),
 		("smbSecurity", "i"), ("smbRealm", "c"), ("smbServers", "i"),
 		("kerberosAdminServer", "i"), ("kerberosRealmviaDNS", "b"),
 		("kerberosKDCviaDNS", "b")]),
-	SaveGroup(self.writeSSSD, [("ldapServer", "i"), ("ldapBaseDN", "c"), ("enableLDAPS", "b"),
+	SaveGroup(self.writeSSSD, self.toggleSSSDService, [("ldapServer", "i"), ("ldapBaseDN", "c"), ("enableLDAPS", "b"),
 		("ldapSchema", "c"), ("ldapCacertDir", "c"), ("enableCacheCreds", "b"),
 		("kerberosRealm", "c"), ("kerberosKDC", "i"), ("kerberosAdminServer", "i"),
 		("forceSSSDUpdate", "b"), ("enableLDAP", "b"), ("enableKerberos", "b"),
 		("enableLDAPAuth", "b"), ("enableIPAv2", "b")]),
-	SaveGroup(self.writeSmartcard, [("smartcardAction", "i"), ("smartcardModule", "c")]),
-	SaveGroup(self.writeWinbind, [("smbWorkgroup", "i"), ("smbServers", "i"),
+	SaveGroup(self.writeSmartcard, None, [("smartcardAction", "i"), ("smartcardModule", "c")]),
+	SaveGroup(self.writeWinbind, self.toggleWinbindService, [("smbWorkgroup", "i"), ("smbServers", "i"),
 		("smbRealm", "c"), ("smbSecurity", "i"), ("smbIdmapRange", "i"),
 		("winbindSeparator", "c"), ("winbindTemplateHomedir", "c"),
 		("winbindTemplatePrimaryGroup", "c"), ("winbindTemplateShell", "c"),
 		("winbindUseDefaultDomain", "b"), ("winbindOffline", "b")]),
-	SaveGroup(self.writeNSS, [("enableDB", "b"), ("enableDirectories", "b"), ("enableWinbind", "b"),
+	SaveGroup(self.writeNSS, None, [("enableDB", "b"), ("enableDirectories", "b"), ("enableWinbind", "b"),
 		("enableOdbcbind", "b"), ("enableNIS3", "b"), ("enableNIS", "b"),
 		("enableLDAPbind", "b"), ("enableLDAP", "b"), ("enableHesiodbind", "b"),
 		("enableHesiod", "b"), ("enableDBIbind", "b"), ("enableDBbind", "b"),
 		("enableCompat", "b"), ("enableWINS", "b"), ("enableMDNS", "b"),
 		("enableNIS3", "b"), ("enableNIS", "b"), ("enableIPAv2", "b"),
 		("enableSSSD", "b"), ("preferDNSinHosts", "b"), ("implicitSSSD", "b")]),
-	SaveGroup(self.writePAM, [("cracklibArgs", "c"), ("passwdqcArgs", "c"),
+	SaveGroup(self.writePAM, None, [("cracklibArgs", "c"), ("passwdqcArgs", "c"),
 		("localuserArgs", "c"), ("pamAccessArgs", "c"), ("enablePAMAccess", "b"),
 		("mkhomedirArgs", "c"), ("enableMkHomeDir", "b"), ("algoRounds", "c"),
 		("passwordAlgorithm", "i"), ("enableShadow", "b"), ("enableNIS", "b"),
@@ -1349,7 +1311,7 @@ class AuthInfo:
 		("enableLocAuthorize", "b"), ("enableSysNetAuth", "b"), ("winbindOffline", "b"),
 		("enableSSSDAuth", "b"), ("enableFprintd", "b"), ("pamLinked", "b"),
 		("implicitSSSDAuth", "b"), ("enableIPAv2", "b")]),
-	SaveGroup(self.writeSysconfig, [("passwordAlgorithm", "i"), ("enableShadow", "b"), ("enableNIS", "b"),
+	SaveGroup(self.writeSysconfig, None, [("passwordAlgorithm", "i"), ("enableShadow", "b"), ("enableNIS", "b"),
 		("enableLDAP", "b"), ("enableLDAPAuth", "b"), ("enableKerberos", "b"),
 		("enableSmartcard", "b"), ("forceSmartcard", "b"),
 		("enableWinbindAuth", "b"), ("enableWinbind", "b"), ("enableDB", "b"),
@@ -1359,8 +1321,15 @@ class AuthInfo:
 		("enableSSSD", "b"), ("enableSSSDAuth", "b"), ("enableForceLegacy", "b"),
 		("ipav2Server", "i"), ("ipav2Domain", "i"), ("ipav2Realm", "c"),
 		("enableIPAv2", "b"), ("ipaDomainJoined", "b"), ("ipav2NoNTP", "b")]),
-	SaveGroup(self.writeNetwork, [("nisDomain", "c")]),
-	SaveGroup(self.toggleShadow, None, [("enableShadow", "b")])]
+	SaveGroup(self.writeNetwork, None, [("nisDomain", "c")]),
+	SaveGroup(self.toggleShadow, None, [("enableShadow", "b")]),
+	SaveGroup(None, self.toggleNisService, [("enableNIS", "b")]),
+	SaveGroup(None, self.toggleOddjobService, [("enableMkHomeDir", "b")]),
+	SaveGroup(None, self.toggleLDAPService, [("enableLDAP", "b"), ("enableLDAPAuth", "b"),
+		("implicitSSSD", "b"), ("implicitSSSDAuth", "b"), ("enableForceLegacy", "b")]),
+	SaveGroup(None, self.toggleSSSDService, [("implicitSSSD", "b"), ("implicitSSSDAuth", "b"),
+		("enableIPAv2", "b"), ("enableSSSD", "b"), ("enableSSSDAuth", "b"), ("enableForceLegacy", "b")]),
+	SaveGroup(None, self.toggleWinbindService, [("enableWinbind", "b"), ("enableWinbindAuth", "b")])]
 
 	def setParam(self, attr, value, ref):
 		oldval = getattr(self, attr)
@@ -3567,7 +3536,6 @@ class AuthInfo:
 		self.update(True)
 		self.prewriteUpdate()
 		self.setupBackup(PATH_CONFIG_BACKUPS + "/last")
-		self.confChanged = True
 		try:
 			ret = self.writeLibuser()
 			ret = ret and self.writeLogindefs()
@@ -3597,6 +3565,9 @@ class AuthInfo:
 		except (OSError, IOError):
 			sys.stderr.write(str(sys.exc_info()[1]) + "\n")
 			return False
+		for group in self.save_groups:
+			if group.toggleFunction:
+				self.toggleFunctions.add(group.toggleFunction)
 		return ret
 
 	def writeChanged(self, ref):
@@ -3608,8 +3579,10 @@ class AuthInfo:
 		try:
 			for group in self.save_groups:
 				if group.attrsDiffer(self, ref):
-					self.confChanged = True
-					ret = ret and group.saveFunction()
+					if group.saveFunction:
+						ret = ret and group.saveFunction()
+					if group.toggleFunction:
+						self.toggleFunctions.add(group.toggleFunction)
 		except (OSError, IOError):
 			sys.stderr.write(str(sys.exc_info()[1]) + "\n")
 			return False
@@ -3842,42 +3815,85 @@ class AuthInfo:
 		cmd = PATH_IPA_CLIENT_INSTALL + " --uninstall --noac"
 		os.system(cmd)
 
-	def post(self, nostart):
-		onlystart = not self.confChanged
-		toggleNisService(self.enableNIS, self.nisDomain, nostart, onlystart)
-		toggleSplatbindService(self.enableWinbind or self.enableWinbindAuth,
-			PATH_WINBIND, PATH_WINBIND_PID,
-			"winbind", nostart, onlystart)
-		toggleSplatbindService(self.implicitSSSD or self.implicitSSSDAuth or
-			self.enableIPAv2,
-			PATH_SSSD, PATH_SSSD_PID,
-			"sssd", nostart, onlystart)
+	def toggleCachingService(self, nostart):
+		if not nostart:
+			if self.enableCache:
+				Service.stop("nscd")
+				Service.start("nscd")
+			else:
+				try:
+					Service.stop("nscd")
+				except OSError:
+					pass
+		return True
+	def toggleNisService(self, nostart):
+		if self.enableNIS and self.nisDomain:
+			if not nostart:
+				os.system("/bin/domainname " + self.nisDomain)
+			try:
+				os.stat(PATH_RPCBIND)
+				Service.enable("rpcbind")
+				if not nostart:
+					Service.start("rpcbind")
+			except OSError:
+				pass
+			try:
+				os.stat(PATH_YPBIND)
+				Service.enable("ypbind")
+				if not nostart:
+					Service.stop("ypbind")
+					Service.start("ypbind")
+			except OSError:
+				pass
+		else:
+			if not nostart:
+				os.system("/bin/domainname \"(none)\"")
+			try:
+				os.stat(PATH_YPBIND)
+				if not nostart:
+					try:
+						Service.stop("ypbind")
+					except OSError:
+						pass
+				Service.disable("ypbind")
+			except OSError:
+				pass
+		return True
+
+	def toggleLDAPService(self, nostart):
 		toggleSplatbindService((self.enableLDAP or self.enableLDAPAuth) and
 			not self.implicitSSSD,
-			PATH_NSLCD, PATH_NSLCD_PID,
-			"nslcd", nostart, onlystart)
-		toggleSplatbindService(self.enableDBbind,
-			PATH_DBBIND, PATH_DBBIND_PID,
-			"dbbind", nostart, onlystart)
-		toggleSplatbindService(self.enableDBIbind,
-			PATH_DBIBIND, PATH_DBIBIND_PID,
-			"dbibind", nostart, onlystart)
-		toggleSplatbindService(self.enableHesiodbind,
-			PATH_HESIODBIND, PATH_HESIODBIND_PID,
-			"hesiodbind", nostart, onlystart)
-		toggleSplatbindService(self.enableLDAPbind,
-			PATH_LDAPBIND, PATH_LDAPBIND_PID,
-			"ldapbind", nostart, onlystart)
-		toggleSplatbindService(self.enableOdbcbind,
-			PATH_ODBCBIND, PATH_ODBCBIND_PID,
-			"odbcbind", nostart, onlystart)
+			PATH_NSLCD,
+			"nslcd", nostart)
+		return True
+
+	def toggleWinbindService(self, nostart):
+		toggleSplatbindService(self.enableWinbind or self.enableWinbindAuth,
+			PATH_WINBIND,
+			"winbind", nostart)
+
+	def toggleSSSDService(self, nostart):
+		explicitenable = ((self.enableSSSD and self.enableSSSDAuth) or
+			(self.enableSSSD and os.path.exists(PATH_SSSD_CONFIG)) or
+			(self.enableSSSDAuth and os.path.exists(PATH_SSSD_CONFIG)))
+		enable = (self.implicitSSSD or self.implicitSSSDAuth or
+			self.enableIPAv2 or explicitenable)
+		toggleSplatbindService(enable,
+			PATH_SSSD,
+			"sssd", nostart or (enable and not (self.implicitSSSD or
+			self.implicitSSSDAuth or self.enableIPAv2)))
+
+	def toggleOddjobService(self, nostart):
 		if self.enableMkHomeDir and os.access("%s/pam_%s.so"
 				% (AUTH_MODULE_DIR, "oddjob_mkhomedir"), os.X_OK):
 			# only switch on and only if pam_oddjob_mkhomedir exists
 			toggleSplatbindService(True,
-				PATH_ODDJOBD, PATH_ODDJOBD_PID,
-				"oddjobd", nostart, onlystart)
-		toggleCachingService(self.enableCache, nostart, onlystart)
+				PATH_ODDJOBD,
+				"oddjobd", nostart)
+
+	def post(self, nostart):
+		for togglefunc in self.toggleFunctions:
+			togglefunc(nostart)
 		if self.ipaUninstall:
 			self.uninstallIPA()
 
