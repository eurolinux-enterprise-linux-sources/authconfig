diff -up authconfig-6.1.12/authinfo.py.cachecreds authconfig-6.1.12/authinfo.py
--- authconfig-6.1.12/authinfo.py.cachecreds	2011-02-04 14:28:02.000000000 +0100
+++ authconfig-6.1.12/authinfo.py	2011-02-04 14:41:42.000000000 +0100
@@ -1228,7 +1228,7 @@ class AuthInfo:
 		self.enableForceLegacy = None
 		self.implicitSSSD = False
 		self.implicitSSSDAuth = False
-		self.enableCacheCreds = True
+		self.enableCacheCreds = None
 
 		# Not really options.
 		self.joinUser = ""
@@ -1267,7 +1267,7 @@ class AuthInfo:
 		("kerberosAdminServer", "i"), ("kerberosRealmviaDNS", "b"),
 		("kerberosKDCviaDNS", "b")]),
 	SaveGroup(self.writeSSSD, [("ldapServer", "i"), ("ldapBaseDN", "c"), ("enableLDAPS", "b"),
-		("ldapSchema", "c"), ("ldapCacertDir", "c"),
+		("ldapSchema", "c"), ("ldapCacertDir", "c"), ("enableCacheCreds", "b"),
 		("kerberosRealm", "c"), ("kerberosKDC", "i"), ("kerberosAdminServer", "i"),
 		("forceSSSDUpdate", "b"), ("enableLDAP", "b"), ("enableKerberos", "b"),
 		("enableLDAPAuth", "b")]),
@@ -1301,7 +1301,7 @@ class AuthInfo:
 		("enableSmartcard", "b"), ("forceSmartcard", "b"),
 		("enableWinbindAuth", "b"), ("enableWinbind", "b"), ("enableDB", "b"),
 		("enableHesiod", "b"), ("enableCracklib", "b"), ("enablePasswdQC", "b"),
-		("enableLocAuthorize", "b"), ("enablePAMAccess", "b"),
+		("enableLocAuthorize", "b"), ("enablePAMAccess", "b"), ("enableCacheCreds", "b"),
 		("enableMkHomeDir", "b"), ("enableSysNetAuth", "b"), ("enableFprintd", "b"),
 		("enableSSSD", "b"), ("enableSSSDAuth", "b"), ("enableForceLegacy", "b")]),
 	SaveGroup(self.writeNetwork, [("nisDomain", "c")])]
@@ -1630,15 +1630,12 @@ class AuthInfo:
 				authprov = None
 		for attr, opt in sssdopt_map.iteritems():
 			try:
-				# Cache credentials value will be taken from sysconfig
-				# or enabled by default.
-				if attr != 'enableCacheCreds':
-					val = domain.get_option(opt)
-					if opt == 'ldap_uri':
-						val = " ".join(val.split(","))
-					elif opt == 'ldap_schema' and val == 'rfc2307':
-						continue
-					self.setParam(attr, val, ref)
+				val = domain.get_option(opt)
+				if opt == 'ldap_uri':
+					val = " ".join(val.split(","))
+				elif opt == 'ldap_schema' and val == 'rfc2307':
+					continue
+				self.setParam(attr, val, ref)
 			except SSSDConfig.NoOptionError:
 				pass
 
@@ -2165,6 +2162,8 @@ class AuthInfo:
 			if self.smbRealm:
 				self.smbRealm = self.smbRealm.upper()
 		self.passwordAlgorithm = self.passwordAlgorithm.lower()
+		if self.enableCacheCreds == None:
+			self.enableCacheCreds = True # enabled by default
 
 	def read(self):
 		ref = self.copy()
